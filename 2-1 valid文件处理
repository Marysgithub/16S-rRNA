数据路径：valid/eachsample

数据格式为已经拆分后的reads (Demultiplex and quality filter reads) ：

trim.INq_a.fq

@INq_a_33261	M01929:278:000000000-AP4T5:1:1101:28156:19224 1:N:0:TCCCGA	orig_bc=GGTTGT	new_bc=GGTTGT	bc_diffs=0
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTTATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAGCCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAAAGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCGGGTAGTCC
+
GGGGGGGGGGGGGGGGGFFGGGGCEGGGFGGGFGGFFGGGGEEGGGDFG@FFGGGG@EGGGGGC<FFGGGFGFGGGGGGGGFGFGGGGGGGGGFGGFGGGGGGF<<FGCADFCGGCGGGGGFEDGGGG::FFCFGEACFFGGFGFG8DCF+@CFGGGCGG9AGGGGF,:3:EEG>CCGBFGFGGGGBE5CFGG5=#EF=@C?<EGGF#C?C5EDD8CDGGGG:78BFFDF#GGGFEA5=@F#8#FFFFFFFGFFFCCF@F?F:9FC@?F??FFBGCEDDA6=++GFDFFFDD@GFD+7FC8CGFD9@9DD8FEGGGCCGE8E@9EGGE>EC>DGGEGGGGGFDGFDAGFFEGGGFCF@ECGGGGDGGGGGGGFB,@FFGGF89GGGGGGGGGGGGGGGGGGGGGGGFFFCGGEGGGFFDGGGFGGGGGGGGGF@7GGGGGGF?GGFFGG

从下面的步骤开始
## De novo OTU picking

Here we will be running the pick_de_novo_otus.py workflow, which runs a series of other scripts automatically. 
This workflow consists of the following steps: #采用pick_de_novo_otus.py流程进行OTU拼接

Pick OTUs based on sequence similarity within the reads (pick_otus.py) #相似序列聚类产生OTU

Pick a representative sequence for each OTU (pick_rep_set.py) #给每个OTU选择代表性的序列

Assign taxonomy to OTU representative sequences (assign_taxonomy.py) #为OTU的代表性序列分配 属

Align OTU representative sequences (align_seqs.py) #对OUT代表性序列进行比对

Filter the alignment (filter_alignment.py) #过滤比对

Build a phylogenetic tree (make_phylogeny.py) #构建进化树

Make the OTU table (make_otu_table.py) #构建OTU表

Using the output from split_libraries.py (seqs.fna), run the following command: 

pick_de_novo_otus.py -i split_library_output/seqs.fna -o otus #输入拆分好的序列，用这个命令一步到位了？ SO EASY?


## 1)   Convert FASTQ files to FASTA and QUAL files (将valid.fq格式的文件转换为fa)

eg: convert_fastaqual_fastq.py -c fastq_to_fastaqual -f seqs.fastq -o fastaqual/   (convert from a fastq file to a fasta file and a qual file)

实践证明，暂时只能单条数据处理： convert_fastaqual_fastq.py -c fastq_to_fastaqual -f ./eachsample/trim.waterx_c.fq -o fastaqual/

原来的fq长这样
*/
@INq_a_33261	M01929:278:000000000-AP4T5:1:1101:28156:19224 1:N:0:TCCCGA	orig_bc=GGTTGT	new_bc=GGTTGT	bc_diffs=0
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTTATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAGCCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAAAGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCGGGTAGTCC
+
GGGGGGGGGGGGGGGGGFFGGGGCEGGGFGGGFGGFFGGGGEEGGGDFG@FFGGGG@EGGGGGC<FFGGGFGFGGGGGGGGFGFGGGGGGGGGFGGFGGGGGGF<<FGCADFCGGCGGGGGFEDGGGG::FFCFGEACFFGGFGFG8DCF+@CFGGGCGG9AGGGGF,:3:EEG>CCGBFGFGGGGBE5CFGG5=#EF=@C?<EGGF#C?C5EDD8CDGGGG:78BFFDF#GGGFEA5=@F#8#FFFFFFFGFFFCCF@F?F:9FC@?F??FFBGCEDDA6=++GFDFFFDD@GFD+7FC8CGFD9@9DD8FEGGGCCGE8E@9EGGE>EC>DGGEGGGGGFDGFDAGFFEGGGFCF@ECGGGGDGGGGGGGFB,@FFGGF89GGGGGGGGGGGGGGGGGGGGGGGFFFCGGEGGGFFDGGGFGGGGGGGGGF@7GGGGGGF?GGFFGG
/*

转换后的fna长这样：（给第一行改了名字，将+以后的删除了）
*/
>INq_a_33261
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTTATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAGCCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAAAGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCGGGTAGTCC
/*

fastaqual文件夹内文件一共为24个：
ls -l|grep "^-"|wc -l
24



为了批量转换fq到fna，查看如下帮助文档，木有此功能,写了个loop脚本：multiple_convert_fq2fna.sh，不好用
Example: Using the input files seqs.fna and seqs.qual, generate seqs.fastq in the fastq_files directory
 convert_fastaqual_fastq.py -f seqs.fna -q seqs.qual -o fastq_files/

Example: Using input seqs.fastq generate fasta and qual files in fastaqual directory
 convert_fastaqual_fastq.py -c fastq_to_fastaqual -f seqs.fastq -o fastaqual

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -q QUAL_FILE_PATH, --qual_file_path=QUAL_FILE_PATH
                        Required input QUAL file if converting to FASTQ.
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Output directory. Will be created if does not exist.
                        [default: .]
  -c CONVERSION_TYPE, --conversion_type=CONVERSION_TYPE
                        type of conversion: fastaqual_to_fastq or
                        fastq_to_fastaqual [default: fastaqual_to_fastq]
  -a ASCII_INCREMENT, --ascii_increment=ASCII_INCREMENT
                        The number to add (subtract if coverting from FASTQ)
                        to the quality score to get the ASCII character (or
                        numeric quality score). [default: 33]
  -F, --full_fasta_headers
                        Include full FASTA headers in output file(s) (as
                        opposed to merely the sequence label). [default:
                        False]
  -b, --full_fastq      Include identifiers on quality lines in the FASTQ file
                        (those beginning with a "+"). Irrelevant when
                        converting from FASTQ. [default=False]
  -m, --multiple_output_files
                        Create multiple FASTQ files, one for each sample, or
                        create multiple matching FASTA/QUAL for each sample.
                        [default=False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -f FASTA_FILE_PATH, --fasta_file_path=FASTA_FILE_PATH
                        Input FASTA or FASTQ file. [REQUIRED]
                       
## De novo OTU picking                      
eg:  pick_de_novo_otus.py -i split_library_output/seqs.fna -o otus           
我的：pick_de_novo_otus.py -i fastaqual/trim.INq_a.fna -o otus

The results of pick_de_novo_otus.py are in otus/, and a description of the steps performed and the results follow:
# otu的运算结果被一揽子放入了otus文件夹，开始分析都是些什么结果

Step 1. Pick OTUs based on sequence similarity within the reads¶ # 基于序列相似性在reads里挑出OTUs

At this step, all of the sequences from all of the samples will be clustered into Operational Taxonomic Units (OTUs) based on their sequence similarity.
#聚类出OTUS
OTUs in QIIME are clusters of sequences, frequently intended to represent some degree of taxonomic relatedness. 
#QIIME里的OTUs是一簇簇的序列， 常代表了不同程度的 种类的相关性
For example, when sequences are clustered at 97% sequence similarity, each resulting cluster is typically thought of as representing a species. 
#例如，序列相似性为97%时， 每个聚类结果就代表了一个物种
This model and the current techniques for picking OTUs are known to be flawed, however, in that 97% OTUs do not match what humans have called species for many microbes. 
#现有技术还不成熟， 有些即便聚出来也和已知的微生物物种对不上
Determining exactly how OTUs should be defined, and what they represent, is an active area of research. See here for more information about OTU picking with QIIME.
#16S 软件未来还有开发空间： 提高OTUs的分辨率及其代表物种


Step 2. Pick a representative sequence for each OTU #每个OTU挑选出一个代表性的序列

Since each OTU may be made up of many related sequences, we will pick a representative sequence from each OTU for downstream analysis. 
#每个OTU都有许多相关的序列，我们将从每个OTU中挑选出一个代表性序列
This representative sequence will be used for taxonomic identification of the OTU and phylogenetic alignment. 
#这些代表性序列将被用于种类鉴定和进化树比对
QIIME uses the OTU file created above and extracts a representative sequence from the fasta file by one of several methods.
#选取代表性序列有很多方法
In the otus/rep_set/ directory, QIIME has a fasta file seqs_rep_set.fasta containing one representative sequence for each OTU. 
#在 otus/rep_set/ 目录下， 后缀为rep_set.fasta的文件中包含了一个代表性序列
In this fasta file, the sequence has been renamed with the OTU identifier, and the additional information on the header line reflects the sequence used as the representative:
在这个fna文件中，序列按OTU识别进行了重命名， 

这里查看文件：(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/rep_set$ head trim.INq_a_rep_set.fasta 

格式为：
*/
>denovo0 INq_a_53067
GTGGGGAATCTTCGGCAATGGACGAAAGTCTGATCGAGCAACGCCGCGTGAGTGAAGAAGGCTTTCGGATTGTAAAACTCTGTTGTTAGAGAAGAACAAGGGTGAGAGTAACTGCTCCTCCATTGACGGTATCTAACCAGAAAGCAACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGAATTACTGGGCGTACAGCGAGCGCAGGCGGTTACTTAAGTATGATGTGAAAGCCCCGGGCTCAACTGGGGAGCTGCATTGGTAACTGGGGGGCTTGAGTGTAGGAGAGGAGGGTGGAATTCCATGTGTAGCAGTGAAATGCGTAGAGATGTGGAGGAACACCGGTGGCGAAGGCGGCCTTCTGGGCTGTCACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCTTGTAGTCC
/*

                       
                       
                       





参考资料：
https://sites.google.com/site/knightslabwiki/qiime-workflow
