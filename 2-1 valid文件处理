数据路径：valid/eachsample

数据格式为已经拆分后的reads (Demultiplex and quality filter reads) ：

trim.INq_a.fq

@INq_a_33261	M01929:278:000000000-AP4T5:1:1101:28156:19224 1:N:0:TCCCGA	orig_bc=GGTTGT	new_bc=GGTTGT	bc_diffs=0
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTTATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAGCCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAAAGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCGGGTAGTCC
+
GGGGGGGGGGGGGGGGGFFGGGGCEGGGFGGGFGGFFGGGGEEGGGDFG@FFGGGG@EGGGGGC<FFGGGFGFGGGGGGGGFGFGGGGGGGGGFGGFGGGGGGF<<FGCADFCGGCGGGGGFEDGGGG::FFCFGEACFFGGFGFG8DCF+@CFGGGCGG9AGGGGF,:3:EEG>CCGBFGFGGGGBE5CFGG5=#EF=@C?<EGGF#C?C5EDD8CDGGGG:78BFFDF#GGGFEA5=@F#8#FFFFFFFGFFFCCF@F?F:9FC@?F??FFBGCEDDA6=++GFDFFFDD@GFD+7FC8CGFD9@9DD8FEGGGCCGE8E@9EGGE>EC>DGGEGGGGGFDGFDAGFFEGGGFCF@ECGGGGDGGGGGGGFB,@FFGGF89GGGGGGGGGGGGGGGGGGGGGGGFFFCGGEGGGFFDGGGFGGGGGGGGGF@7GGGGGGF?GGFFGG

从下面的步骤开始
## De novo OTU picking

Here we will be running the pick_de_novo_otus.py workflow, which runs a series of other scripts automatically. 
This workflow consists of the following steps: #采用pick_de_novo_otus.py流程进行OTU拼接

Pick OTUs based on sequence similarity within the reads (pick_otus.py) #相似序列聚类产生OTU

Pick a representative sequence for each OTU (pick_rep_set.py) #给每个OTU选择代表性的序列

Assign taxonomy to OTU representative sequences (assign_taxonomy.py) #为OTU的代表性序列分配 属

Align OTU representative sequences (align_seqs.py) #对OUT代表性序列进行比对

Filter the alignment (filter_alignment.py) #过滤比对

Build a phylogenetic tree (make_phylogeny.py) #构建进化树

Make the OTU table (make_otu_table.py) #构建OTU表

Using the output from split_libraries.py (seqs.fna), run the following command: 

pick_de_novo_otus.py -i split_library_output/seqs.fna -o otus #输入拆分好的序列，用这个命令一步到位了？ SO EASY?


## 1)   Convert FASTQ files to FASTA and QUAL files (将valid.fq格式的文件转换为fa)

eg: convert_fastaqual_fastq.py -c fastq_to_fastaqual -f seqs.fastq -o fastaqual/   (convert from a fastq file to a fasta file and a qual file)

实践证明，暂时只能单条数据处理： convert_fastaqual_fastq.py -c fastq_to_fastaqual -f ./eachsample/trim.waterx_c.fq -o fastaqual/

原来的fq长这样
*/
@INq_a_33261	M01929:278:000000000-AP4T5:1:1101:28156:19224 1:N:0:TCCCGA	orig_bc=GGTTGT	new_bc=GGTTGT	bc_diffs=0
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTTATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAGCCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAAAGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCGGGTAGTCC
+
GGGGGGGGGGGGGGGGGFFGGGGCEGGGFGGGFGGFFGGGGEEGGGDFG@FFGGGG@EGGGGGC<FFGGGFGFGGGGGGGGFGFGGGGGGGGGFGGFGGGGGGF<<FGCADFCGGCGGGGGFEDGGGG::FFCFGEACFFGGFGFG8DCF+@CFGGGCGG9AGGGGF,:3:EEG>CCGBFGFGGGGBE5CFGG5=#EF=@C?<EGGF#C?C5EDD8CDGGGG:78BFFDF#GGGFEA5=@F#8#FFFFFFFGFFFCCF@F?F:9FC@?F??FFBGCEDDA6=++GFDFFFDD@GFD+7FC8CGFD9@9DD8FEGGGCCGE8E@9EGGE>EC>DGGEGGGGGFDGFDAGFFEGGGFCF@ECGGGGDGGGGGGGFB,@FFGGF89GGGGGGGGGGGGGGGGGGGGGGGFFFCGGEGGGFFDGGGFGGGGGGGGGF@7GGGGGGF?GGFFGG
/*

转换后的fna长这样：（给第一行改了名字，将+以后的删除了）
*/
>INq_a_33261
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTTATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAGCCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAAAGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCGGGTAGTCC
/*

fastaqual文件夹内文件一共为24个：
ls -l|grep "^-"|wc -l
24



为了批量转换fq到fna，查看如下帮助文档，木有此功能,写了个loop脚本：multiple_convert_fq2fna.sh，不好用
Example: Using the input files seqs.fna and seqs.qual, generate seqs.fastq in the fastq_files directory
 convert_fastaqual_fastq.py -f seqs.fna -q seqs.qual -o fastq_files/

Example: Using input seqs.fastq generate fasta and qual files in fastaqual directory
 convert_fastaqual_fastq.py -c fastq_to_fastaqual -f seqs.fastq -o fastaqual

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -q QUAL_FILE_PATH, --qual_file_path=QUAL_FILE_PATH
                        Required input QUAL file if converting to FASTQ.
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Output directory. Will be created if does not exist.
                        [default: .]
  -c CONVERSION_TYPE, --conversion_type=CONVERSION_TYPE
                        type of conversion: fastaqual_to_fastq or
                        fastq_to_fastaqual [default: fastaqual_to_fastq]
  -a ASCII_INCREMENT, --ascii_increment=ASCII_INCREMENT
                        The number to add (subtract if coverting from FASTQ)
                        to the quality score to get the ASCII character (or
                        numeric quality score). [default: 33]
  -F, --full_fasta_headers
                        Include full FASTA headers in output file(s) (as
                        opposed to merely the sequence label). [default:
                        False]
  -b, --full_fastq      Include identifiers on quality lines in the FASTQ file
                        (those beginning with a "+"). Irrelevant when
                        converting from FASTQ. [default=False]
  -m, --multiple_output_files
                        Create multiple FASTQ files, one for each sample, or
                        create multiple matching FASTA/QUAL for each sample.
                        [default=False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -f FASTA_FILE_PATH, --fasta_file_path=FASTA_FILE_PATH
                        Input FASTA or FASTQ file. [REQUIRED]
                       
## De novo OTU picking                      
eg:  pick_de_novo_otus.py -i split_library_output/seqs.fna -o otus           
我的：pick_de_novo_otus.py -i fastaqual/trim.INq_a.fna -o otus

The results of pick_de_novo_otus.py are in otus/, and a description of the steps performed and the results follow:
# otu的运算结果被一揽子放入了otus文件夹，开始分析都是些什么结果

Step 1. Pick OTUs based on sequence similarity within the reads¶ # 基于序列相似性在reads里挑出OTUs

At this step, all of the sequences from all of the samples will be clustered into Operational Taxonomic Units (OTUs) based on their sequence similarity.
#聚类出OTUS
OTUs in QIIME are clusters of sequences, frequently intended to represent some degree of taxonomic relatedness. 
#QIIME里的OTUs是一簇簇的序列， 常代表了不同程度的 种类的相关性
For example, when sequences are clustered at 97% sequence similarity, each resulting cluster is typically thought of as representing a species. 
#例如，序列相似性为97%时， 每个聚类结果就代表了一个物种
This model and the current techniques for picking OTUs are known to be flawed, however, in that 97% OTUs do not match what humans have called species for many microbes. 
#现有技术还不成熟， 有些即便聚出来也和已知的微生物物种对不上
Determining exactly how OTUs should be defined, and what they represent, is an active area of research. See here for more information about OTU picking with QIIME.
#16S 软件未来还有开发空间： 提高OTUs的分辨率及其代表物种


Step 2. Pick a representative sequence for each OTU #每个OTU挑选出一个代表性的序列

Since each OTU may be made up of many related sequences, we will pick a representative sequence from each OTU for downstream analysis. 
#每个OTU都有许多相关的序列，我们将从每个OTU中挑选出一个代表性序列
This representative sequence will be used for taxonomic identification of the OTU and phylogenetic alignment. 
#这些代表性序列将被用于种类鉴定和进化树比对
QIIME uses the OTU file created above and extracts a representative sequence from the fasta file by one of several methods.
#选取代表性序列有很多方法
In the otus/rep_set/ directory, QIIME has a fasta file seqs_rep_set.fasta containing one representative sequence for each OTU. 
#在 otus/rep_set/ 目录下， 后缀为rep_set.fasta的文件中包含了一个代表性序列
In this fasta file, the sequence has been renamed with the OTU identifier, and the additional information on the header line reflects the sequence used as the representative:
在这个fna文件中，序列按OTU识别进行了重命名， 

这里查看文件：(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/rep_set$ head trim.INq_a_rep_set.fasta 

格式为：
*/
>denovo0 INq_a_53067
GTGGGGAATCTTCGGCAATGGACGAAAGTCTGATCGAGCAACGCCGCGTGAGTGAAGAAGGCTTTCGGATTGTAAAACTCTGTTGTTAGAGAAGAACAAGGGTGAGAGTAACTGCTCCTCCATTGACGGTATCTAACCAGAAAGCAACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGAATTACTGGGCGTACAGCGAGCGCAGGCGGTTACTTAAGTATGATGTGAAAGCCCCGGGCTCAACTGGGGAGCTGCATTGGTAACTGGGGGGCTTGAGTGTAGGAGAGGAGGGTGGAATTCCATGTGTAGCAGTGAAATGCGTAGAGATGTGGAGGAACACCGGTGGCGAAGGCGGCCTTCTGGGCTGTCACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCTTGTAGTCC
/*

Step 3. Assign taxonomy to OTU representative sequences #将OTU中的代表序列比对应到种属

Next, taxonomy will be assigned to each representative sequence. 
By default, QIIME uses the uclust consensus taxonomy classifier to attempt to assign taxonomy to each representative sequence resulting from step 2.
#QIIME 默认uclust一致性种属分类将步骤2中的代表性序列分配到对应的种

In the directory otus/uclust_assigned_taxonomy/, there will be a log file and a text file. 
# 在路径otus/uclust_assigned_taxonomy中，有一个log文件和一个文本文件。
The text file (which we refer to as an observation or OTU metadata file) contains a line for each OTU, 
followed by the taxonomic assignment, the fraction of uclust hits that contained this taxonomic assignment, 
and the number of uclust hits that were found.  
#text文件每一行是一个OTU, 后面是被分配到哪些种属， 以及比中的数目
For some OTUs, the assignment may be as specific as a bacterial species, while others may not be assignable at all (and will therefore be labeled as Unassigned). 
#对于一些OTUs, 有些比对到特殊的菌种，有些则完全比对不上
Below are the first few lines of an observation metadata file containing the results of uclust taxonomic assignment:      

*/
(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/uclust_assigned_taxonomy$ more trim.INq_a_rep_set_tax_assignments.txt 
denovo56	k__Bacteria; p__Proteobacteria; c__Gammaproteobacteria; o__Alteromona dales; f__OM60; g__; s__	1.00	3
denovo58	k__Bacteria; p__Proteobacteria; c__Gammaproteobacteria; o__Legionellales; f__Legionellaceae; g__; s__	0.67	3
denovo59	k__Bacteria; p__Proteobacteria; c__Gammaproteobacteria; o__Alteromona dales; f__OM60; g__; s__	1.00	3
denovo3059	k__Bacteria; p__Proteobacteria; c__Deltaproteobacteria; o__Desulfobac terales; f__Desulfobacteraceae; g__Desulfococcus; s__	1.00	3
/*

Step 4. Align OTU representative sequences # 对OTU代表序列的比对

Alignment of the OTU representative sequences and phylogeny inference is necessary only if phylogenetic metrics such as UniFrac will be subsequently invoked. 
#OTU比对的代表性序列和进化相关性是必要条件。当且仅当UniFrac这个系统进化指标被激活？
Alignments can either be generated de novo using programs such as MUSCLE, or through alignment to an existing alignment with tools like PyNAST. 
#比对可以用MUSCLE或者PyNAST
For small studies such as this tutorial, either method is possible. However, for studies involving many sequences (roughly, more than 1000), de novo aligners are very slow and alignment with PyNAST is necessary. 
#对于数据量较小的研究，两种比对工具都可以。但是对于序列大于1000的， 从头比对就很慢，就需要选用PyNAST
Since alignment is one of the most computationally intensive bottlenecks in the pipeline, large studies benefit greatly from parallelization of this task, which is possible with PyNAST.
#比对是密集计算的瓶颈，PyNAST特别适合大数据
After aligning the sequences, a log file and an alignment file are created in the directory otus/pynast_aligned_seqs/.                    
#比对结果在 otus/pynast_aligned_seqs目录下

4.1）. (qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/pynast_aligned_seqs$ more trim.INq_a_rep_set_log.txt 
*/log文件格式
candidate sequence ID	   candidate nucleotide count	errors	 template ID	     BLAST percent identity to template	candidate      nucleotide count post-NAST
denovo0       INq_a_53067	                     450		           4406763	      88.00	                                            450
denovo1 INq_a_52166	425		753182	82.80	425
denovo10 INq_a_57368	450		95370	89.60	450
denovo100 INq_a_41174	450		651100	83.80	450
denovo1000 INq_a_40333	450		72076	81.80	450
denovo1001 INq_a_61135	450		527288	83.10	450

4.2）. (qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/pynast_aligned_seqs$ more trim.INq_a_rep_set_aligned.fasta 
*/代表序列比对上的文件格式
>denovo0 INq_a_53067 1..450
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
------------------------------G-TG---GG-G-A-ATC-TTCGG-C-AA-T-GG--AC-GA-A----A-G-TC-T-
GA-TC-GA-GCAA-CGCC-G-CG-T---G-A-G--T--GA-A-G--A--A-G-G-CT-----TT-CG---------G-A-T-T-G
-T--A---AA-A-CTC--------TG-TT-G-T--T-AGA----GA-A--G---AACAAGG---GTGA--G----A--G--TA-A
---C----T-----GC-T-CCT-CCA-TT-GA-CG-GT-A-T-CT-A-AC-C---------AG-----------AAAGC-AAC-G
G-C-TAA---C--T-ACGT--GCCA--G-C---A--GCCG---C-GG--TA-AT--AC---GT-AG-GTG-GCA-A-G-CG-TTG
T-C-CGG-AA-TT-A--C-T--GGGC-GTA----CA-GCGA-GC--G-CA-G-G-C-G------------G--T-TA-C-T-T-A
A----G-T-A-T---G-ATG-TG-A-AA-GC--CC-CGG-G--------------------------------------------
------------------------CT-C-AA------------------------------------------------------
-------------------CT-G-G-GG-AG------C-TGC-A-T-T--------G--GT-A-A-C-T-G-GGG--G-G-C
/*

4.3）. (qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/pynast_aligned_seqs$ more trim.INq_a_rep_set_aligned_pfiltered.fasta 
*/过滤后的代表序列？比对的文件格式
>denovo0
-----------------------------------------------------GTGGGGAATCTTCGGCAATGGACGAAAGTCTG
ATCGAGCAACGCCGCGTGAGTGAAGAAGGCTTTCGGATTGTAAAACTCTGTTGTTAGAGAAGCGGTATCTAACCAGAAAGCAACG
GCTAAC-TACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGAATTACTGGGCGTACAGCGAGCGCAGGCGGT
TACTTAAGTATGATGTGAAAGCCCCGGGCTCAACTGGGGAG-CTCATTGGTAACTGGGGGGCTTGAGTGTAGGAGAGGAGGGTGG
AATTCCATGTGTAGCAGTGAAATGCGTAGAGATGTGGAGGAACACCGGTGGCGAAGGCGGCCTTCTGGGCTGTCACTGACGCTGA
GGCGCGAAAGCGTGGGGAGCAAACAGGATTAGAAACCCTTGTAGTCC--------------------------------------
---------------------------------
*/

4.4）. (qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus/pynast_aligned_seqs$ more trim.INq_a_rep_set_failures.fasta 
*/还有比对失败的~~两条序列~~
>denovo2057 INq_a_50852
GTCTAGAAATTTGGGCAATGGGCGAAAGCCTGACCCAGCGACGCCGCGTGAGGGCTGAAGTTCTTCGGAATGTAAACCTCTGTTG
AGGGGAACGATAATGACGGTACCCCTCGAGGAAGCCTCGGCTAACTCCGTGCCAGCCGCCGCGGTAACACGGAGGAGGCAAGCGT
TGTCCGGAATCACTGGGCGTAAAGGGTGTGTCGGTATCCAGATGGGTCAGGTGTGAAATCCAACAGCTACACTGTTGACGTGCAT
CTGAAACTATCGAGATTGAGGACGTGAGGGGAGAGGGGAACTCGCGGTGTAGCGGTAGAAGGGGTGGATATCGCGAGGAATACCG
ATGGCGAAGGCGGCTCTCTAGTGTGTTCCTCTTATGAGGAGCCAATTGAGTTTATCCTTCGGGTTATGATTATTTGGTCCTGACA
CTGAAACACGAAAGCTGGGGGAGCGAACGGGATTAGAAACCCCAGTAGTCC
>denovo2635 INq_a_56324
GTCGAGAATCTTCCACAATGGGGGCAACCCTGATGGAGCGACGCCGCGTGACTGAAGAAGCTCTTCGGAGTGTAAAAGTCTTTTC
TGGGGGAAAAATACCCAGCATCATGTTTTTGTCTTACTTAAATTTGACGAAAATATGATGCTGGGAATGATGGTACCCCAGGAAT
AAGCAACGACTAACTTCGTGCCAGCAGTCGCGGTAATACGAAGGTTGCAAGCGTTTCCCGGAATTATTGGGCGTAAAGCGTTCGT
AGGCGGTTTATTAAGTCTTAAGTCAAAGCCGGAAGCTCAACTTCAGCTCGCGTAGGATACTGGTAGACTAGAGTTATAGAGAGAT
TAGGGGAACTCCATGGGAAGCGGTGGAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGA
CGCTCAGGAACGAAAGCGTGGGGAGCAAACAGGATTAGATACCCCGGTAGTCC

Step 5. Filter the alignment #过滤比对

Before inferring a phylogenetic tree relating the sequences, it is beneficial to filter the sequence alignment to remove columns comprised of only gaps, and locations known to be excessively variable. 
#构建进化树前要将fna文件中带有空白的列，以及带有过度变量的位点滤除
QIIME uses a 16S alignment Lane mask (Lane, D.J. 1991) by default. After filtering, a filtered alignment file is created in the directory otus/pynast_aligned_seqs/.
#这里用的是16s Lane mask （算法？）作为默认值
 结果保存在/otus/pynast_aligned_seqs文件夹下，也就是刚才我们看到的后缀为aligned_pfiltered.fasta格式的文件
 
 
Step 6. Build a phylogenetic tree #构建进化树
The filtered alignment file produced in the directory otus/pynast_aligned_seqs/ is then used to build a phylogenetic tree using a tree-building program.
#过滤好的aligned_pfiltered.fasta格式的文件用来构建进化树
The Newick format tree file is written to rep_set.tre, which is located in the otus/ directory . This file can be viewed in tree visualization software, and is necessary for UniFrac diversity measurements and other phylogenetically-aware analyses (described below). 
#用的是Newick格式的建树文件，文件名：rep_set.tre, 就在otus/根目录下，是 UniFrac多样性分析的必要文件
The tree obtained can be visualized with programs such as FigTree, which was used to visualize the phylogenetic tree stored in rep_set.tre:
#对Newick文件可视化的看树软件有三种，其中之一是FigTree

下载安装FigTree, 用java打开API，导入tre图，得到的是一张硕大无比的黑乎乎的无根树？问号脸~

Step 7. Make the OTU table #制表

Using taxonomic assignments (step 3) and the OTU map (step 1) QIIME assembles a table of OTU abundances in each sample with taxonomic identifiers for each OTU.
#使用步骤3中的比对结果和步骤1里的OTU图，制作OTU丰度表。
The result of this step is otu_table.biom, which is located in the otus/ directory. For more information about the OTU table format, which is stored in the BIOM format, please see here.
# 丰度表otu_table.biom在otu根目录下。

biom文件怎么看？
用summarize_taxa_through_plots.py脚本
Usage: summarize_taxa_through_plots.py [options] {-i/--otu_table_fp OTU_TABLE_FP -o/--output_dir OUTPUT_DIR}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)


The steps performed by this script are: Summarize OTU by Category (optional, pass -c); Summarize Taxonomy; and Plot Taxonomy Summary

Example usage: 
Print help message and exit
 summarize_taxa_through_plots.py -h

Plot taxa summaries for all samples: #绘制所有样本的种属信息
 summarize_taxa_through_plots.py -o taxa_summary -i otu_table.biom -m Fasting_Map.txt
 
 我的：(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus$ summarize_taxa_through_plots.py -o taxa_summary -i otu_table.biom -m Fasting_Map.txt

提示Fasting_Map.txt不存在

Plot taxa summaries on a categorical basis: #在分类基础上绘制种属总信息Alternatively, the user can supply a mapping_category, where the OTU is summarized based on a sample metadata category
 summarize_taxa_through_plots.py -o taxa_summary_by_treatment -i otu_table.biom -m Fasting_Map.txt -c Treatment

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Print information during execution -- useful for
                        debugging [default: False]
  -p PARAMETER_FP, --parameter_fp=PARAMETER_FP
                        path to the parameter file, which specifies changes to
                        the default behavior. See
                        http://www.qiime.org/documentation/file_formats.html
                        #qiime-parameters. [if omitted, default values will be
                        used]
  -m MAPPING_FP, --mapping_fp=MAPPING_FP
                        path to the mapping file [REQUIRED if passing -c]
  -f, --force           Force overwrite of existing output directory (note:
                        existing files in output_dir will not be removed)
                        [default: none]
  -w, --print_only      Print the commands but don't call them -- useful for
                        debugging [default: False]
  -c MAPPING_CATEGORY, --mapping_category=MAPPING_CATEGORY
                        Summarize OTU table using this category. [default:
                        none]
  -s, --sort            Sort the OTU Table [default: False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -i OTU_TABLE_FP, --otu_table_fp=OTU_TABLE_FP
                        the input otu table [REQUIRED]
    -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        the output directory [REQUIRED]

噗，下面有官方查看方法：
## Summarize the OTU table
To view summary statistics of the OTU table, run:

eg: biom summarize-table -i otus/otu_table.biom

我的： (qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop$ biom summarize-table -i otus/otu_table.biom 

The summary shows that there are relatively few sequences in this tutorial example, but the sequences present are fairly evenly distributed among the 9 microbial communities:

结果解读：

Num samples: 1
Num observations: 3130
Total count: 33084
Table density (fraction of non-zero values): 1.000

Counts/sample summary:
 Min: 33084.0
 Max: 33084.0
 Median: 33084.000
 Mean: 33084.000
 Std. dev.: 0.000
 Sample Metadata Categories: None provided
 Observation Metadata Categories: taxonomy

Counts/sample detail:
INq: 33084.0

Make an OTU network #构建OTU网络
To create an OTU network, using the following command:

eg. make_otu_network.py -m Fasting_Map.txt -i otus/otu_table.biom -o otus
切换到项目目录下，激活qiime1,发现没有map.txt,怎么办？自己做一个。
我的：(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop$ make_otu_network.py -m otus/map20170914.txt -i otus/otu_table.biom -o otus/
注意这行命令里的map20170914是没有经过验证的文件。下面验证后会给出一个corrected文件，用验证后的正确文件进行网络构建


首先看barcode, 然后通过文献得到338F_806R的引物序列
参考文献： https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5108805/
trim.INq_a.fq 
@INq_a_33261	M01929:278:000000000-AP4T5:1:1101:28156:19224 1:N:0:TCCCGA	orig
_bc=GGTTGT	new_bc=GGTTGT	bc_diffs=0
GTAGGGAATATTCCACAATGAACGAAAGTTTGATGGAGCGACACAGCGTGCAGGATGAAGGTCTTAGGATCGTAAACTGCTGTT
ATAAGAGAAGAACAGTTGTAATAGGAAATGATTACAACCTGACGGTATCTTATCAGAAAGCACCGGCTAACTATGTGCCAGCAG
CCGCGGTAATACATAGGGTGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGTTCGTAGGCGGTTTATTAAGTCGTAAGTCAA
AGCCTGAAGCTCAACTTCAGCTCGCTTAGGTGACTGGTAGACTAGAGTTATAGAGAGATTAGGGGAACTCCATGTGAAGCGGTG
GAATGCGTAGATATATGGAAGAACACCAATGGCGAAGGCACCTAATTGGCTATACACTGACGCTCAGGAACGAAAGCGTGGGGA
GCAAACAGGATTAGAAACCCGGGTAGTCC


转回头检验了自制map的有效性，
(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop/otus$ validate_mapping_file.py -m map20170914.txt -o mapping_output

发现生成目录下多了一个map20170914_corrected.txt文件，那就用这个文件来做network.
我的命令：(qiime1) mary@administrator-ThinkStation-P710:~/myproj_1/16s_own_scallop$ make_otu_network.py -m otus/map20170914.txt -i otus/otu_table.biom -o otus/

这样就会在otu目录下生成otu_networks文件夹
将txt节点文件导入cytoscape，生成网络图，不过没看出什么来

Summarize communities by taxonomic composition #统计种属的构成
You can group OTUs by different taxonomic levels (phylum, class, family, etc.) with the workflow script summarize_taxa_through_plots.py. 
使用summarize_taxa_through_plots.py来按照不同的界门纲目分类
Note that this process depends directly on the method used to assign taxonomic information to OTUS (see Assigning Taxonomy above):
eg: summarize_taxa_through_plots.py -i otus/otu_table.biom -o taxa_summary -m Fasting_Map.txt
输入我的命令后报错。根据map文件，必须要大于6个样本。被自己坑了。昨天只做了一个INq_a的数据。没有跑其他的样本。
解决方案：要么把其他样本也跑了。要么就是改map.

我决定改map



参考资料：
https://sites.google.com/site/knightslabwiki/qiime-workflow
http://qiime.org/tutorials/tutorial.html
